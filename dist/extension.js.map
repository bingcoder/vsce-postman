{"version":3,"sources":["webpack://vsc-postman/./src/commands/history.ts","webpack://vsc-postman/./src/provider/side.ts","webpack://vsc-postman/external \"path\"","webpack://vsc-postman/external \"vscode\"","webpack://vsc-postman/webpack/bootstrap","webpack://vsc-postman/./src/extension.ts"],"names":["createWebviewPanel","context","id","title","columnToShowIn","vscode","window","activeTextEditor","viewColumn","ViewColumn","One","panel","enableScripts","localResourceRoots","Uri","file","path","join","extensionPath","retainContextWhenHidden","iconPath","light","dark","webview","onDidReceiveMessage","message","type","history","SideProvider","getHistory","push","value","updateHistory","script","asWebviewUri","html","handlePostmanNew","handleHistoryItemClick","currentPanel","item","reveal","name","console","log","postMessage","onDidDispose","undefined","subscriptions","handleHistoryItemNewWindow","handleHistoryItemDelete","createTime","deleteHistoryItem","handleHistoryRefresh","refresh","SideItem","TreeItem","method","url","super","label","toUpperCase","this","tooltip","command","arguments","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","instance","map","JSON","parse","sort","a","b","workspace","getConfiguration","get","historyKey","update","time","newHistory","filter","includes","action","fire","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","registerTreeDataProvider","commands","registerCommand"],"mappings":"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","file":"extension.js","sourcesContent":["import * as vscode from 'vscode';\nimport * as path from 'path';\nimport { SideProvider } from '../provider/side';\n\nconst settingKey = 'vscPostman.history';\nconst createWebviewPanel = (\n  context: vscode.ExtensionContext,\n  {\n    id = 'vscPostman',\n    title = '新建请求',\n  }: { id?: string; title?: string } = {}\n) => {\n  const columnToShowIn = vscode.window.activeTextEditor\n    ? vscode.window.activeTextEditor.viewColumn\n    : vscode.ViewColumn.One;\n  const panel = vscode.window.createWebviewPanel(id, title, columnToShowIn!, {\n    enableScripts: true,\n    localResourceRoots: [\n      vscode.Uri.file(path.join(context.extensionPath, 'media')),\n      vscode.Uri.file(path.join(context.extensionPath, 'build')),\n    ],\n    retainContextWhenHidden: true,\n  });\n\n  panel.iconPath = {\n    light: vscode.Uri.file(path.join(context.extensionPath, 'media/panelIcon.light.svg')),\n    dark: vscode.Uri.file(path.join(context.extensionPath, 'media/panelIcon.dark.svg')),\n  };\n\n  panel.webview.onDidReceiveMessage((message: Message) => {\n    switch (message.type) {\n      case 'requestSave':\n        const history = SideProvider.getHistory();\n        history.push(message.value);\n        SideProvider.updateHistory(history);\n        return;\n\n      default:\n        break;\n    }\n  });\n\n  const script = panel.webview.asWebviewUri(\n    vscode.Uri.file(path.join(context.extensionPath, 'build/bundle.js'))\n  );\n\n  panel.webview.html = `<!DOCTYPE html>\n  <html>\n    <head>\n      <meta charset=\"UTF-8\" />\n    </head>\n    <body>\n      <div id=\"root\"></div>\n      <script>\n        const webviewVscode = acquireVsCodeApi();\n      </script>\n      <script src=${script}></script>\n    </body>\n  </html>`;\n  return panel;\n};\n\nexport const handlePostmanNew = (context: vscode.ExtensionContext) => () => {\n  createWebviewPanel(context);\n};\n\nexport const handleHistoryItemClick = (context: vscode.ExtensionContext) => {\n  let currentPanel: vscode.WebviewPanel | undefined = undefined;\n  return (item: HistoryItem) => {\n    if (currentPanel) {\n      currentPanel.reveal();\n    } else {\n      currentPanel = createWebviewPanel(context);\n    }\n    currentPanel.title = item.name;\n    console.log(item.name);\n    currentPanel.webview.postMessage(item);\n    currentPanel.onDidDispose(\n      () => {\n        currentPanel = undefined;\n      },\n      null,\n      context.subscriptions\n    );\n  };\n};\n\nexport const handleHistoryItemNewWindow = (\n  context: vscode.ExtensionContext\n) => (item: HistoryItem) => {\n  const currentPanel = createWebviewPanel(context);\n  currentPanel.title = item.name;\n  currentPanel.webview.postMessage(item);\n\n};\n\nexport const handleHistoryItemDelete = ({\n  createTime,\n}: HistoryItem) => {\n  SideProvider.deleteHistoryItem(createTime);\n};\nexport const handleHistoryRefresh = () => {\n  SideProvider.refresh();\n};\n","import * as vscode from 'vscode';\n\nexport class SideItem extends vscode.TreeItem {\n  constructor(item: HistoryItem) {\n    const { method, name, createTime, url } = item;\n    super({\n      label: `${method[0].toUpperCase()}•${name}`,\n    });\n    this.id = `${createTime}`;\n    this.tooltip = `${method} ${url}`;\n    this.command = {\n      title: '查看',\n      command: 'vscPostmanHistory.click',\n      arguments: [item],\n    };\n  }\n}\nexport class SideProvider implements vscode.TreeDataProvider<HistoryItem> {\n  static instance: SideProvider;\n  constructor() {\n    return SideProvider.instance || (SideProvider.instance = this);\n  }\n  readonly _onDidChangeTreeData = new vscode.EventEmitter<HistoryItem | void>();\n  readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\n\n  getTreeItem(item: HistoryItem) {\n    return new SideItem(item);\n  }\n  getChildren() {\n    return SideProvider.getHistory()\n      .map((item) => JSON.parse(item))\n      .sort((a, b) => b.createTime - a.createTime);\n  }\n  static historyKey = 'vscPostman.history';\n\n  static getHistory(): string[] {\n    return vscode.workspace.getConfiguration().get(this.historyKey)!;\n  }\n  static updateHistory(history: string[]) {\n    return this.refresh(() => vscode.workspace.getConfiguration().update(this.historyKey, history, true));\n  }\n\n  static deleteHistoryItem(time: number) {\n    const newHistory = this.getHistory()\n      .filter(item => !item.includes(`${time}`));\n    this.updateHistory(newHistory);\n  }\n\n  static async refresh(action?: () => void) {\n    if (action) {\n      await action();\n    }\n    this.instance._onDidChangeTreeData.fire();\n  }\n}\n","module.exports = require(\"path\");;","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport { SideProvider } from './provider/side';\nimport { handlePostmanNew, handleHistoryItemClick, handleHistoryItemNewWindow, handleHistoryItemDelete, handleHistoryRefresh } from './commands/history';\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('start');\n  context.subscriptions.push(vscode.window.registerTreeDataProvider('vsc-postman-side', new SideProvider()));\n\n  context.subscriptions.push(vscode.commands.registerCommand('vscPostman.new', handlePostmanNew(context)));\n  context.subscriptions.push(vscode.commands.registerCommand('vscPostmanHistory.click', handleHistoryItemClick(context)));\n  context.subscriptions.push(vscode.commands.registerCommand('vscPostmanHistory.newWindow', handleHistoryItemNewWindow(context)));\n  context.subscriptions.push(vscode.commands.registerCommand('vscPostmanHistory.delete', handleHistoryItemDelete));\n  context.subscriptions.push(vscode.commands.registerCommand('vscPostmanHistory.refresh', handleHistoryRefresh));\n}"],"sourceRoot":""}